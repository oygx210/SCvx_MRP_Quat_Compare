% Vehicle configuration

lander.m = 300;
lander.UM = lander.m ;
lander.UL = norm(r_I_C + v_I_C) ;
lander.UT = sqrt(100);
lander.UA= lander.UL / (lander.UT^2);
lander.UF = lander.UA*lander.UM;
lander.UI = lander.UM*(lander.UL^2);
 
% Vehicle Parameters, nondimensionalized 
lander.g = [0 0 -9.81]./ lander.UA;
lander.T_max = 5337.866 / lander.UF;
lander.Isp = 180 / lander.UT;
lander.alpha_mdot = lander.T_max / lander.Isp;
lander.m_wet = lander.m / lander.UM;
lander.m_dry = 113.398 / lander.UM;

h = 2.5;
r = 0.6;
% xyz with z going through the ro
lander.I_c = diag([(1/12)*lander.m*(3*r*r + h*h), ...
			(1/12)*lander.m*(3*r*r + h*h) (1/2)*lander.m*r*r]) ./lander.UI;

% 		m_0 = m_wet;
% 		r_I_0 = r_I_C / UL;
% 		v_I_0 = v_I_C / (UL/UT);
% 		sigma_BI_0 = sigma_BI_C;
% 		w_B_0 = w_B_C * UT;
% 
% 		m_T   = self.m_dry;
% 		r_I_T = np.array((0.,0.,0.));
% 		v_I_T = np.array((-.1,0.0,0.0))/(UL/UT);
% 		sigma_BI_T = np.array((0.,0.,0.));
% 		w_B_T = np.deg2rad(np.array((0.,0.,0.)));
% 
% 		self.glideslope = np.tan(np.deg2rad(20));
% 		self.gimbal_max = np.deg2rad(15);
% 		self.cos_theta_max = np.cos(np.deg2rad(89));
% 		self.tan_theta_max = np.tan(np.deg2rad(89)/4);
% 		self.TVC_max = np.deg2rad(20.0);
% 		self.omega_max = np.deg2rad(20*UT);
% 		self.T_min = 0.15 * self.T_max; 
% 
% 		self.r_COM = np.array((-1.2192, 0., 0.)) / UL;
% 
% 		self.things_that_matter = np.array((UM,UL,UT,UA,UF,UI, \
% 			self.T_max, self.T_min, self.gimbal_max, self.omega_max, \
% 			self.glideslope, self.cos_theta_max, self.tan_theta_max, self.alpha_mdot, m_0));
% 
% 		self.x_0 = np.concatenate(((m_0,), r_I_0, v_I_0, sigma_BI_0, w_B_0));
% 		self.x_T = np.concatenate(((m_T,), r_I_T, v_I_T, sigma_BI_T, w_B_T));
% 		self.u_T = np.array((0.,0.,0.));