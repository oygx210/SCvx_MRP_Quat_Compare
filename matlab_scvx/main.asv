%% Padraig Lysandrou 2020 scvx
% An SCVX 6dof guidance instance
close all; clear all; clc;
iter_limit = 20;
K = 50;
% load vehicle parameters
vehicle_params;

% Configure the initial condition
tf_guess = 12.14;
r_N_0 = [500 300 500].';
v_N_0 = -[0 100 0].';
sigma = [0 0 0].';
omega = [0.01 0.01 0.01].';

% Can use any form of attitude formalism for sigma here.
lander_nd = compute_nd_factors(lander, tf_guess, r_N_0, v_N_0, sigma, omega);
% Terminal state (terminal mass should be left unconstrained)
lander_nd.XT = zeros(size(lander_nd.X0));

% Compute a prior reference state and control input history over K
[x_0, u_0] = initialize_reference_trajectory(lander_nd, K);

% Set the dimensions of things!
lander_nd.m = length(x_0(:,1));
lander_nd.n = length(u_0(:,1));
lander_nd.K = K;

% Configure weights
weights.w_nu	= 1.e5;
weights.w_dxu 	= 1.e-3;
weights.w_ds    = 0.1; 
weights.w_s     = 1;

% set up beginning of loop
sigma = tf_guess;
converged = false;
error_flag = false;
iter_counter = 0;
solve_time = 0;
x = x_0;
u = u_0;

% precompute jacobians for use later
lander_dynamics = vehicle_dynamics(lander_nd);

while ~converged && iter_counter < iter_limit
   iter_counter = iter_counter + 1;
   disp("Iteration " + string(iter_counter));
   
   % Compute the linear system matrices
   tic
   output_matrices = lander_dynamics.discretized_dynamics(x, u, sigma);
    
   % Form and solve the convex sub-problem. Send in the last trajectory and
   % input history for the trust regions.
   o_cvx = scvx_subproblem(lander_nd, output_matrices, x, u, sigma, weights);
   disp('dxu_norm   = '+string(o_cvx.delta_norm));
   disp('sigma_norm = '+string(o_cvx.sigma_norm));
   disp('nu_norm    = '+string(o_cvx.nu_norm));
   toc
   
   x = o_cvx.x;
   u = o_cvx.u;
   sigma = o_cvx.sigma;
    
%    if o_cvx.status ~= 'Solved'
%        break;
%    end
   
   if o_cvx.delta_norm < 1e-3 && o_cvx.sigma_norm < 1e-3 && o_cvx.nu_norm < 1e-7
       converged = true;
   end
   
   weights.w_dxu = weights.w_dxu*1.5;
   
end

%% plots
close all;
figure;
plot(1:K, x(1,:).*lander_nd.UM)
title('mass')

figure;
plot(1:K, x(2,:).*lander_nd.UR); hold on;
plot(1:K, x(3,:).*lander_nd.UR); hold on;
plot(1:K, x(4,:).*lander_nd.UR); hold on;
title('distance')
legend('x','y','z')

figure;
plot(1:K, x(5,:).*lander_nd.UV); hold on;
plot(1:K, x(4,:).*lander_nd.UV); hold on;
plot(1:K, x(7,:).*lander_nd.UV); hold on;
title('velocity')
legend('x','y','z')

figure;
plot(1:K, u(1,:).*lander_nd.UF); hold on;
plot(1:K, u(2,:).*lander_nd.UF); hold on;
plot(1:K, u(3,:).*lander_nd.UF); hold on;
plot(1:K, vecnorm(u).*lander_nd.UF, '--'); hold on;
title('inputs')
legend('x','y','z')



width=7; height=8;
h = figure('Units','inches',...
'Position',[0 0 width height],...
'PaperPositionMode','auto');
axis tight manual % this ensures that getframe() returns a consistent size
filename = 'TrajectoryAnimation.gif';
speed_up = 3;
del_time = ((sigma*lander_nd.UT)/K)/speed_up;
for n = 1:K
    % Draw plot for y = x.^n
    buffer = 50;
    alpha = 0.7;
    grid on;
    hold on;
    plot3(x(2,n), x(3,n), x(4,n)); hold on;
    plot3(0, 0, 0); hold on;
    view(-49+n,13 + n/2)
    plot3((max(x(2,n))+buffer)*ones(size(x(2,n))), x(3,n), x(4,n),'--', 'color',[0,0,0]+alpha); hold on;
    plot3(x(2,n), (max(x(3,n))+buffer)*ones(size(x(3,n))), x(4,n),'--',  'color',[0,0,0]+alpha); hold on;
    plot3(x(2,n), x(3,n), 0.*x(4,n),'--', 'color', [0,0,0]+alpha); hold on;
    sfact = 300;
    pfact = 1/40;
%     q = quiver3(x(2,n), x(3,n), x(4,n), -u(1,n)./sfact, ...
%         -u(2,n)./sfact, -u(3,n)./sfact);
%     q.Color = 'red';
%     q.LineWidth = 0.5;
%     q.MaxHeadSize = 0.01;
%     q.AutoScale = 'off';
%     hold on
%     q2 = quiver3(x(2,n), x(3,n), x(4,n), point_hist(2,n)/pfact, ...
%         point_hist(3,n)/pfact,  point_hist(1,n)/pfact);
%     q2.Color = 'black';
%     q2.LineWidth = 0.75;
%     q2.MaxHeadSize = 0.01;
%     q2.AutoScale = 'off';
%     q2.ShowArrowHead = 'off';
    title(['Trajectory (m) over time']);
    xlabel('X distance (m)')
    ylabel('Y distance (m)')
    zlabel('Z distance (m)')
    
    axis equal;
    xlim([min(x(2,:))-buffer max(x(2,:))+buffer])
    ylim([min(x(3,:))-buffer max(x(3,:))+buffer])
    zlim([0 max(x(1,:))+buffer])
    
    set(gca,...
    'Units','normalized',...
    'Position',[.15 .2 .75 .7],...
    'FontUnits','points',...
    'FontWeight','normal',...
    'FontSize',12,...
    'FontName','Times')

    drawnow limitrate    
    % Capture the plot as an image 
    frame = getframe(h); 
    im = frame2im(frame); 
    [imind,cm] = rgb2ind(im,256); 
    % Write to the GIF File 
    if n == 1 
      imwrite(imind,cm,filename,'gif','DelayTime',del_time, 'Loopcount',inf);
    else 
      imwrite(imind,cm,filename,'gif','DelayTime',del_time, 'WriteMode','append'); 
    end 
end
